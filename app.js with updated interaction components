// App.js (Updated with interaction components)
import React, { useState, useEffect } from 'react';
import Board from './Board';
import './App.css'; // Import your CSS file here

function App() {
  const [tickets, setTickets] = useState([]);
  const [groupingOption, setGroupingOption] = useState('status');
  const [sortingOption, setSortingOption] = useState('priority');

  // Fetch data from the API
  useEffect(() => {
    // Fetch data from the API and set the 'tickets' state
    // Example fetch:
    fetch('https://api.quicksell.co/v1/internal/frontend-assignment')
      .then(response => response.json())
      .then(data => {
        setTickets(data.tickets);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, []);

  // Group tickets based on selected grouping option
  const groupedTickets = () => {
    // Implement logic to group tickets based on 'groupingOption'
    // Return grouped tickets
  };

  // Sort tickets based on selected sorting option
  const sortedTickets = () => {
    // Implement logic to sort tickets based on 'sortingOption'
    // Return sorted tickets
  };

  // Handle grouping option change
  const handleGroupingChange = (option) => {
    setGroupingOption(option);
  };

  // Handle sorting option change
  const handleSortingChange = (option) => {
    setSortingOption(option);
  };

  return (
    <div className="App">
      {/* Grouping and Sorting options */}
      <div>
        <label>Group By:</label>
        <select value={groupingOption} onChange={(e) => handleGroupingChange(e.target.value)}>
          {/* Dropdown options for grouping */}
        </select>
        <label>Sort By:</label>
        <select value={sortingOption} onChange={(e) => handleSortingChange(e.target.value)}>
          {/* Dropdown options for sorting */}
        </select>
      </div>

      {/* Display Kanban board with grouped and sorted tickets */}
      <Board groupedTickets={groupedTickets()} />
    </div>
  );
}

export default App;
